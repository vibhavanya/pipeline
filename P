pipeline {
  environment {
    registry = "vibhavanya/vibha1strepo"
    registryCredential = 'docker_hub'
  }
  agent any
  stages {
    stage('Cloning Git') {
      steps {
          script{
                  Pipeline_Message=env.STAGE_NAME
          }
        git 'https://github.com/vibhavanya/Coding3Jan.git'
      }
    }
    stage('Cleaning of Old Packages done') 
	{
     steps{
        dir("/var/lib/jenkins/workspace/Cod3Jan/company")
{
        sh label: 'Clean', script: 'mvn clean'
}
    }
    }
    stage('Maven Compilation') {
      steps{
        dir("/var/lib/jenkins/workspace/Cod3Jan/company"){
        sh label: 'Compile', script: 'mvn compile'
            
        }
      }
    }
    stage('Sonar Analysis'){
     steps{
        withSonarQubeEnv('sonarqube'){
            dir("/var/lib/jenkins/workspace/Cod3Jan/company")
{
         sh 'mvn sonar:sonar'
}
        }
        }}
    stage('Maven Package') {
    steps{
     dir("/var/lib/jenkins/workspace/Cod3Jan/company")
{
    sh label: 'Testing', script: 'mvn clean install'
    
}
    }
    }
    stage('Jfrog Artifacory upload')
    {
        steps{
    script{
        def server= Artifactory.server 'jenkins_artifactory_server'
                    def uploadSpec= """{
                        "files": [{
                        "pattern": "/var/lib/jenkins/workspace/Cod3Jan/company/target/*.war",
                        "target": "fullDemoVibha"}]
                    }"""
        server.upload(uploadSpec)
        }
    }
    }
    
    stage('Jfrog Artifactory download'){
    
     steps{
     script{
    def server= Artifactory.server 'jenkins_artifactory_server'
    def downloadSpec = """{
    "files": [
    {
      "pattern": "fullDemoVibha/*.war",
      "target": "/var/lib/jenkins/workspace/Pipeline/"
    }
    ]
    }"""
    server.download(downloadSpec)
  
	}
        
     }
 
    }
    stage('create image') {
      steps{
          dir("/var/lib/jenkins/workspace/Cod3Jan/company")
          {
        script {
          docker.build registry + ":$BUILD_NUMBER"
        }
      }
      }
    }
    stage('Building image') {
      steps{
        script {
        Pipeline_Message=env.STAGE_NAME
        dir("/var/lib/jenkins/workspace/Cod3Jan/company")
        {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
        }
      }
    }
    stage('Deploy Image') {
      steps{
        script {
          docker.withRegistry( '', registryCredential ) {
            dockerImage.push()
          }
        }
      }
    }
    stage('Remove Unused docker image') {
      steps{
        sh "docker rmi $registry:$BUILD_NUMBER"
      }
    }
    stage('pull image from dockerhub'){
    steps{
        script{
             sh "docker pull $registry:$BUILD_NUMBER"
    }
    }
  }
  stage('deployee the image in the tomcat server'){
      steps{
          script{
              sh"docker run -d -it -p 8086:8080 --name fulldemoVibha  -v /var/lib/tomcat8/conf/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml $registry:$BUILD_NUMBER"
             
          }
      }
  }
   stage("Quality Gate")
    {
        steps{
    timeout(time: 1, unit: 'HOURS') 
    { 
        script 
            {
                Pipeline_Message=env.STAGE_NAME
                echo "Quality_Gate"
            }
    }
}
}
  
  }
post 
    { 
        success {
            mail bcc: '', body: 'Successfully build', from: '', replyTo: '', subject: 'Done Successfully.', to: 'Vibha.Kumari@mindtree.com'
        }
        failure {
            mail bcc: '', body:"Stage Failed: ${Pipeline_Message}; Build Url: ${env.BUILD_URL} Result: ${currentBuild.result}", from: '', replyTo: '', subject:"Status of pipeline: ${currentBuild.fullDisplayName}", to: 'Vibha.Kumari@mindtree.com'
        }
    }
  
}
